name: Build
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      with:
        fetch-depth: 0
    - name: Build the package
      run: |
        source $CONDA/etc/profile.d/conda.sh
        conda install conda=23.7 conda-build
        if [ ${{ matrix.os }} == macos-latest ]; then args="--python 3.10 --variants {'force_arch':'yes'}"; fi
        if [ ${{ matrix.os }} == windows-latest ]; then args="--python 3.10"; fi
        echo "ARGS: $args"
        conda build conda.recipe $args
        mv $CONDA/conda-bld .
        # This ensures the noarch repodata.json is not clobbered
        if [ ${{ matrix.os }} != ubuntu-latest ]; then rm -rf conda-bld/noarch; fi
    - name: Upload build artifacts
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
      with:
        if-no-files-found: error
        name: conda-bld
        path: conda-bld/
  test:
    needs: build
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        cversion: ['23.9.0', '23.7.4', '23.5.2', '23.3.1', '22.11.1', '4.14.0', '4.11.0']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      with:
        fetch-depth: 0
    - name: Download build artfiacts
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: conda-bld
        path: ./conda-bld
    - name: Set environment
      run: |
        mv conda-bld $CONDA/
        source $CONDA/etc/profile.d/conda.sh
        aid_version=$(conda search local::anaconda-ident | grep ^anaconda-ident | awk '{print $2}' | tail -1)
        echo "AID_VERSION=$aid_version" >> "$GITHUB_ENV"
        echo "C_VERSION=${{ matrix.cversion }}" >> "$GITHUB_ENV"
        if [ $cversion == '23.9' ]; then
          echo "MAMBA=conda-libmamba-solver" >> "$GITHUB_ENV"
        fi
    - name: Build test environments
      run: |
        source $CONDA/etc/profile.d/conda.sh
        conda config --prepend channels ctools
        conda install -c local constructor conda-index anaconda-ident=$AID_VERSION
        conda create -p ./testenv -c local anaconda-ident anaconda-ident=$AID_VERSION conda=$C_VERSION $MAMBA
    - name: Test endpoints (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call testenv\Scripts\activate
        anaconda-ident --expect
        anaconda-keymgr --help
    - name: Test endpoints (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        source ./testenv/bin/activate
        anaconda-ident --expect
        anaconda-keymgr --help
    - name: Build an installer
      env:
        TEST_REPO_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
        cd tests
        export CONDA_PREFIX=$CONDA
        bash test_installer.sh $TEST_REPO_TOKEN $AID_VERSION $C_VERSION
    - name: Run the installer (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd tests
        start /wait AIDTest-1.0-Windows-x86_64.exe /S /D=%USERPROFILE%\aidtest
    - name: Run the installer (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd tests
        bash AIDTest*.sh -b -p ~/aidtest -k
    - name: Test the installed environment
      env:
        TEST_REPO_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        ANACONDA_IDENT_DEBUG: "1"
        ANACONDA_IDENT_RAISE: "1"
      run: |
        cd tests
        bash test_environment.sh ~/aidtest "$TEST_REPO_TOKEN"
    - name: Test the package
      run: |
        set -x
        if [ -f ./testenv/Scripts/conda.exe ]; then \
           sed -i.bak "s@CONDA_EXE=.*@CONDA_EXE=$PWD/testenv/Scripts/conda.exe@" testenv/etc/profile.d/conda.sh; \
        fi
        source ./testenv/*/activate
        cd tests
        conda create -n testchild1 --yes
        conda create -n testchild2 --yes
        python -m anaconda_ident.install --status
        python test_config.py
        bash test_keymgr.sh
        if [ -n "$MAMBA" ]; then
          conda config --set solver libmamba
          python test_config.py
          bash test_keymgr.sh
          conda config --set solver classic
        fi
  upload:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Download package
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: conda-bld
        path: ./conda-bld
    - name: Upload to anaconda.org
      if: github.event_name == 'push'
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        source $CONDA/bin/activate
        conda install anaconda-client
        [[ "$GITHUB_REF" =~ ^refs/tags/ ]] || export LABEL="--label dev"
        # Remove the macos build, use the unix noarch instead
        rm -rf conda-bld/osx-64 || :
        anaconda --verbose --token $ANACONDA_TOKEN upload --user mcg $LABEL conda-bld/*/*.tar.bz2 --force
